stop("ERROR: alternative argument must be \"less\", \"greater\", or \"two-sided\"")
data <- data[!is.na(data)]
output <- list()
if(is.factor(data)) {
# Data is a factor
if(null < 0 | null >1){
stop("Error: invalid hypothesized value. Must be between 0 and 1")
}
n <- length(data)
p_hat <- unname(prop.table(table(data))[1])
# Z-score
z <- (p_hat - null) / (sqrt( (null * (1-null)) /n))
p_val <- pnorm(z)
if(alternative == 'two-sided'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE) * 2
p_val <- p_val*2
} else if(alternative == 'less'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- 1 - p_val
#p_val <- pt(abs(z), df=n-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2,df=n-1) * (sqrt( (null * (1-null)) /n))
lower_lim <- p_hat - error
upper_lim <- p_hat + error
output <- list(statistic = z,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=p_hat,null.value=null,alpha=alpha)
} else{
# Data is numeric
s_mean <- mean(data)
s_sd   <- sd(data)
s_size <- length(data)
# T-score
t <- (s_mean - null) / (s_sd / sqrt(s_size))
# p-value should depend on the argument alternative
if(alternative == 'two-sided'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE) * 2
} else if(alternative == 'less'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- pt(abs(t), df=s_size-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2, df = s_size-1) * (s_sd/sqrt(s_size))
upper_lim <- s_mean + error
lower_lim <- s_mean -  error
output <- list(statistic = t,df=s_size-1,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=s_mean,null.value=null,alpha=alpha)
}
return(output)
}
hyp_test(data, null = 1.4, alpha = .01, alternative = "greater")
data <- 1:10
hyp_test(data, null = 6, alpha = .101, alternative = "greater")
data <- factor(c(NA, rep("a", 60), rep("b", 40)))
hyp_test(data, null = 0.70, alpha = .02, alternative = "less")
hyp_test <- function(data,null,alpha=0.05,alternative = "two-sided"){
# data
# A vector
# Can have NA values
# If numeric, function performs one-sample t-test for a mean
# If factor, function will perform a one-sample z-test for a proportion.
# Sample proportion will be the proportion of data in the first factor level
# null
# Single numeric value, that is the hypothesized value
# alpha
# Single numeric value, significance level.
# By default set to 0.05
# alternative
# Character string specifying the form of the alternative hypotehsis ("less", "greater","two-sided")
# Default: "two-sided"
# Check if the alternative argument is valid. If it is not, stop and give an error message
if(alternative != "two-sided" & alternative != "less" & alternative != "greater")
stop("ERROR: alternative argument must be \"less\", \"greater\", or \"two-sided\"")
data <- data[!is.na(data)]
output <- list()
if(is.factor(data)) {
# Data is a factor
if(null < 0 | null >1){
stop("Error: invalid hypothesized value. Must be between 0 and 1")
}
n <- length(data)
p_hat <- unname(prop.table(table(data))[1])
# Z-score
z <- (p_hat - null) / (sqrt( (null * (1-null)) /n))
p_val <- pnorm(z)
if(alternative == 'two-sided'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE) * 2
p_val <- p_val*2
} else if(alternative == 'less'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- 1 - p_val
#p_val <- pt(abs(z), df=n-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2,df=n-1) * (sqrt( (null * (1-null)) /n))
lower_lim <- p_hat - error
upper_lim <- p_hat + error
output <- list(statistic = z,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=p_hat,null.value=null,alpha=alpha)
message(paste("Ho: p = ", null))
message(paste0("Test Statistic: ", round(t,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
} else{
# Data is numeric
s_mean <- mean(data)
s_sd   <- sd(data)
s_size <- length(data)
# T-score
t <- (s_mean - null) / (s_sd / sqrt(s_size))
# p-value should depend on the argument alternative
if(alternative == 'two-sided'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE) * 2
} else if(alternative == 'less'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- pt(abs(t), df=s_size-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2, df = s_size-1) * (s_sd/sqrt(s_size))
upper_lim <- s_mean + error
lower_lim <- s_mean -  error
output <- list(statistic = t,df=s_size-1,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=s_mean,null.value=null,alpha=alpha)
message(paste("Ho: mu = ", null))
message(paste0("Test Statistic: ", round(t,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
}
return(output)
}
v
data <- factor(c(NA, rep("a", 60), rep("b", 40)))
hyp_test(data, null = 0.70, alpha = .02, alternative = "less")
hyp_test <- function(data,null,alpha=0.05,alternative = "two-sided"){
# data
# A vector
# Can have NA values
# If numeric, function performs one-sample t-test for a mean
# If factor, function will perform a one-sample z-test for a proportion.
# Sample proportion will be the proportion of data in the first factor level
# null
# Single numeric value, that is the hypothesized value
# alpha
# Single numeric value, significance level.
# By default set to 0.05
# alternative
# Character string specifying the form of the alternative hypotehsis ("less", "greater","two-sided")
# Default: "two-sided"
# Check if the alternative argument is valid. If it is not, stop and give an error message
if(alternative != "two-sided" & alternative != "less" & alternative != "greater")
stop("ERROR: alternative argument must be \"less\", \"greater\", or \"two-sided\"")
data <- data[!is.na(data)]
output <- list()
if(is.factor(data)) {
# Data is a factor
if(null < 0 | null >1){
stop("Error: invalid hypothesized value. Must be between 0 and 1")
}
n <- length(data)
p_hat <- unname(prop.table(table(data))[1])
# Z-score
z <- (p_hat - null) / (sqrt( (null * (1-null)) /n))
p_val <- pnorm(z)
if(alternative == 'two-sided'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE) * 2
p_val <- p_val*2
} else if(alternative == 'less'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- 1 - p_val
#p_val <- pt(abs(z), df=n-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2,df=n-1) * (sqrt( (null * (1-null)) /n))
lower_lim <- p_hat - error
upper_lim <- p_hat + error
output <- list(statistic = z,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=p_hat,null.value=null,alpha=alpha)
message(paste("Ho: p = ", null))
message(paste0("Test Statistic: ", round(z,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
} else{
# Data is numeric
s_mean <- mean(data)
s_sd   <- sd(data)
s_size <- length(data)
# T-score
t <- (s_mean - null) / (s_sd / sqrt(s_size))
# p-value should depend on the argument alternative
if(alternative == 'two-sided'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE) * 2
} else if(alternative == 'less'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- pt(abs(t), df=s_size-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2, df = s_size-1) * (s_sd/sqrt(s_size))
upper_lim <- s_mean + error
lower_lim <- s_mean -  error
output <- list(statistic = t,df=s_size-1,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=s_mean,null.value=null,alpha=alpha)
message(paste("Ho: mu = ", null))
message(paste0("Test Statistic: ", round(t,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
}
return(output)
}
hyp_test(data, null = 0.70, alpha = .02, alternative = "less")
hyp_test(data, null = 6, alpha = .101, alternative = "greater")
data <- 1:10
hyp_test(data, null = 6, alpha = .101, alternative = "greater")
hyp_test <- function(data,null,alpha=0.05,alternative = "two-sided"){
if(alternative != "two-sided" & alternative != "less" & alternative != "greater")
stop("ERROR: alternative argument must be \"less\", \"greater\", or \"two-sided\"")
data <- data[!is.na(data)]
output <- list()
if(is.factor(data)) {
# Data is a factor
if(null < 0 | null >1){
stop("Error: invalid hypothesized value. Must be between 0 and 1")
}
n <- length(data)
p_hat <- unname(prop.table(table(data))[1])
SE <- sqrt( (null * (1-null)) /n)
# Z-score
z <- (p_hat - null) / SE
p_val <- pnorm(z)
if(alternative == 'two-sided'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE) * 2
p_val <- p_val*2
} else if(alternative == 'less'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- 1 - p_val
#p_val <- pt(abs(z), df=n-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2,df=n-1) * SE
lower_lim <- p_hat - error
upper_lim <- p_hat + error
output <- list(statistic = z,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=p_hat,null.value=null,alpha=alpha)
message(paste("Ho: p = ", null))
message(paste0("Test Statistic: ", round(z,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
} else{
# Data is numeric
s_mean <- mean(data)
s_sd   <- sd(data)
s_size <- length(data)
SE <- s_sd / sqrt(s_size)
# T-score
t <- (s_mean - null) / SE
# p-value should depend on the argument alternative
if(alternative == 'two-sided'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE) * 2
} else if(alternative == 'less'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- pt(abs(t), df=s_size-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2, df = s_size-1) * SE
upper_lim <- s_mean + error
lower_lim <- s_mean -  error
output <- list(statistic = t,df=s_size-1,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=s_mean,null.value=null,alpha=alpha)
message(paste("Ho: mu = ", null))
message(paste0("Test Statistic: ", round(t,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
}
return(output)
}
data <- factor(c(NA, rep("a", 60), rep("b", 40)))
hyp_test(data, null = .5, alpha = .01, alternative = "greater")
hyp_test <- function(data,null,alpha=0.05,alternative = "two-sided"){
if(alternative != "two-sided" & alternative != "less" & alternative != "greater")
stop("ERROR: alternative argument must be \"less\", \"greater\", or \"two-sided\"")
data <- data[!is.na(data)]
output <- list()
if(is.factor(data)) {
# Data is a factor
if(null < 0 | null >1){
stop("Error: invalid hypothesized value. Must be between 0 and 1")
}
n <- length(data)
p_hat <- unname(prop.table(table(data))[1])
SE <- sqrt( (null * (1-null)) /n+1)
# Z-score
z <- (p_hat - null) / SE
p_val <- pnorm(z)
if(alternative == 'two-sided'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE) * 2
p_val <- p_val*2
} else if(alternative == 'less'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- 1 - p_val
#p_val <- pt(abs(z), df=n-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2,df=n-1) * SE
lower_lim <- p_hat - error
upper_lim <- p_hat + error
output <- list(statistic = z,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=p_hat,null.value=null,alpha=alpha)
message(paste("Ho: p = ", null))
message(paste0("Test Statistic: ", round(z,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
} else{
# Data is numeric
s_mean <- mean(data)
s_sd   <- sd(data)
s_size <- length(data)
SE <- s_sd / sqrt(s_size)
# T-score
t <- (s_mean - null) / SE
# p-value should depend on the argument alternative
if(alternative == 'two-sided'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE) * 2
} else if(alternative == 'less'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- pt(abs(t), df=s_size-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2, df = s_size-1) * SE
upper_lim <- s_mean + error
lower_lim <- s_mean -  error
output <- list(statistic = t,df=s_size-1,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=s_mean,null.value=null,alpha=alpha)
message(paste("Ho: mu = ", null))
message(paste0("Test Statistic: ", round(t,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
}
return(output)
}
hyp_test(data, null = .5, alpha = .01, alternative = "greater")
hyp_test <- function(data,null,alpha=0.05,alternative = "two-sided"){
if(alternative != "two-sided" & alternative != "less" & alternative != "greater")
stop("ERROR: alternative argument must be \"less\", \"greater\", or \"two-sided\"")
data <- data[!is.na(data)]
output <- list()
if(is.factor(data)) {
# Data is a factor
if(null < 0 | null >1){
stop("Error: invalid hypothesized value. Must be between 0 and 1")
}
n <- length(data)
p_hat <- unname(prop.table(table(data))[1])
SE <- sqrt( (null * (1-null)) /n)
# Z-score
z <- (p_hat - null) / SE
p_val <- pnorm(z)
if(alternative == 'two-sided'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE) * 2
p_val <- p_val*2
} else if(alternative == 'less'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- 1 - p_val
#p_val <- pt(abs(z), df=n-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2,df=n-1) * SE
lower_lim <- p_hat - error
upper_lim <- p_hat + error
output <- list(statistic = z,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=p_hat,null.value=null,alpha=alpha)
message(paste("Ho: p = ", null))
message(paste0("Test Statistic: ", round(z,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
} else{
# Data is numeric
s_mean <- mean(data)
s_sd   <- sd(data)
s_size <- length(data)
SE <- s_sd / sqrt(s_size)
# T-score
t <- (s_mean - null) / SE
# p-value should depend on the argument alternative
if(alternative == 'two-sided'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE) * 2
} else if(alternative == 'less'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- pt(abs(t), df=s_size-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2, df = s_size-1) * SE
upper_lim <- s_mean + error
lower_lim <- s_mean -  error
output <- list(statistic = t,df=s_size-1,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=s_mean,null.value=null,alpha=alpha)
message(paste("Ho: mu = ", null))
message(paste0("Test Statistic: ", round(t,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
}
return(output)
}
hyp_test <- function(data,null,alpha=0.05,alternative = "two-sided"){
if(alternative != "two-sided" & alternative != "less" & alternative != "greater")
stop("ERROR: alternative argument must be \"less\", \"greater\", or \"two-sided\"")
data <- data[!is.na(data)]
output <- list()
if(is.factor(data)) {
# Data is a factor
if(null < 0 | null >1){
stop("Error: invalid hypothesized value. Must be between 0 and 1")
}
n <- length(data)
p_hat <- unname(prop.table(table(data))[1])
SE <- sqrt( (null * (1-null)) /n)
# Z-score
z <- (p_hat - null) / SE
p_val <- pnorm(z)
if(alternative == 'two-sided'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE) * 2
p_val <- p_val*2
} else if(alternative == 'less'){
#p_val <- pt(abs(z), df=n-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- 1 - p_val
#p_val <- pt(abs(z), df=n-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2,df=n-1) * SE
lower_lim <- p_hat - error
upper_lim <- p_hat + error
output <- list(statistic = z,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=p_hat,null.value=null,alpha=alpha)
message(paste("Ho: p = ", null))
message(paste0("Test Statistic: ", round(z,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
} else{
# Data is numeric
s_mean <- mean(data)
s_sd   <- sd(data)
s_size <- length(data)
SE <- s_sd / sqrt(s_size)
# T-score
t <- (s_mean - null) / SE
# p-value should depend on the argument alternative
if(alternative == 'two-sided'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE) * 2
} else if(alternative == 'less'){
p_val <- pt(abs(t), df=s_size-1,lower.tail = FALSE)
} else if(alternative == "greater"){
p_val <- pt(abs(t), df=s_size-1,lower.tail = TRUE)
}
error <- qt(1-alpha/2, df = s_size-1) * SE
upper_lim <- s_mean + error
lower_lim <- s_mean -  error
output <- list(statistic = t,df=s_size-1,p.value=p_val,conf.int=c(lower_lim,upper_lim),estimate=s_mean,null.value=null,alpha=alpha)
message(paste("Ho: mu = ", null))
message(paste0("Test Statistic: ", round(t,2), ", p-value: ", round(p_val,4)))
message(paste0("Confidence Interval: ", "(", round(lower_lim, 2), ",", round(upper_lim,2)), ")")
}
return(output)
}
#TEST 1
data <- c(NA, 5:25)
hyp_test(data, null = 16, alpha = .05, alternative = "two-sided")
#TEST 2
data <- factor(c(NA, rep("a", 60), rep("b", 40)))
hyp_test(data, null = .5, alpha = .01, alternative = "greater")
# TEST 3
data <- factor(c(NA, rep("a", 60), rep("b", 40)))
hyp_test(data, null = 1.4, alpha = .01, alternative = "greater")
# TEST 4
data <- 1:10
hyp_test(data, null = 6, alpha = .101, alternative = "greater")
# TEST 5
data <- factor(c(NA, rep("a", 60), rep("b", 40)))
hyp_test(data, null = 0.70, alpha = .02, alternative = "less")
version
install.packages('rgdal', type="source",repos='http://cran.rstudio.com')
available.packages()
ap <- available.packages()
ap["rgdal"]
install.packages('rgeos', type="source",dependencies = T, repos='http://cran.rstudio.com')
install.packages('rgdal', type="source",dependencies = T, repos='http://cran.rstudio.com')
ggplot(sf, aes(x=BasePay, fill=JobTitle)) + geom_histogram(alpha=0.2,position="identity") +
ggtitle("Salaries of Top 3 Government Jobs in San Francisco") +
xlab("Base Pay ($)")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
ggplot(sf, aes(x=BasePay, fill=JobTitle)) + geom_histogram(alpha=0.2,position="identity") +
ggtitle("Salaries of Top 3 Government Jobs in San Francisco") +
xlab("Base Pay ($)")
ggplot(sf, aes(x=BasePay, fill=JobTitle)) + geom_histogram(alpha=0.2,position="identity") +
ggtitle("Salaries of Top 3 Government Jobs in San Francisco") +
xlab("Base Pay ($)")
sf <- read.csv("data_sets/SF_Salaries.csv", header = TRUE, na.strings = "Not Provided")
head(sf)
sf <- read.csv("data_sets/SF_Salaries.csv", header = TRUE, na.strings = "Not Provided")
head(sf)
names(conf) <- c("First_Name", "Last_Name", "ID","Business_Phone","Home_Phone","Mobile_Phone","OK to_contact_business", "OK_to_contact_home", "OK_to_contact_mobile","Registration_Rate","Will_attend Wednesday_mixer","Will_attend_Thursday_lunch", "Volunteer_at_the_conference", "Eating_restrictions")
conf <- read.csv("data_sets/Conference-v2.csv", header=FALSE)
names(conf) <- c("First_Name", "Last_Name", "ID","Business_Phone","Home_Phone","Mobile_Phone","OK to_contact_business", "OK_to_contact_home", "OK_to_contact_mobile","Registration_Rate","Will_attend Wednesday_mixer","Will_attend_Thursday_lunch", "Volunteer_at_the_conference", "Eating_restrictions")
View(conf)
tapply(conf$Registration_Rate, sum)
load("~/classes/stat331/lab13workspace.Rdata")
#states <- map_data("state")
#states <- subset(states, region %in% c("massachusetts"))
#m <- ggplot(dunkin_data) + geom_polygon(
# data=states,aes(x=long,y=lat,group=group),colour="black",fill = "white") + geom_point(aes(x=lon,y=lat,colour = "red"))
#m
#m <- ggplot() + geom_map(data=dunkin_data,map=states,aes(lon,lat))
map("state",region="massachusetts")
library(maps)
#states <- map_data("state")
#states <- subset(states, region %in% c("massachusetts"))
#m <- ggplot(dunkin_data) + geom_polygon(
# data=states,aes(x=long,y=lat,group=group),colour="black",fill = "white") + geom_point(aes(x=lon,y=lat,colour = "red"))
#m
#m <- ggplot() + geom_map(data=dunkin_data,map=states,aes(lon,lat))
map("state",region="massachusetts")
points(dunkin_data$lon,dunkin_data$lat, col="red",pch=20,cex=0.5)
dunkin_data <- read.csv("dunkin_donuts.csv")
starbucks_data <- read.csv("starbucks.csv")
#states <- map_data("state")
#states <- subset(states, region %in% c("massachusetts"))
#m <- ggplot(dunkin_data) + geom_polygon(
# data=states,aes(x=long,y=lat,group=group),colour="black",fill = "white") + geom_point(aes(x=lon,y=lat,colour = "red"))
#m
#m <- ggplot() + geom_map(data=dunkin_data,map=states,aes(lon,lat))
map("state",region="massachusetts")
points(dunkin_data$lon,dunkin_data$lat, col="red",pch=20,cex=0.5)
points(starbucks_data$lon,starbucks_data$lat,col="green",pch=20,cex=0.5)
legend("topright",
legend = c("Starbucks", "Dunkin Donuts"),
fill=c("Green","Red"),
cex=0.5)
setwd("/home/exit369/School/STAT331/FinalProject/Stat331-Final_Project/Shiny_App")
shiny::runApp()
