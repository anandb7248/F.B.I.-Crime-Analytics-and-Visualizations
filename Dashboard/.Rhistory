View(M)
M
M1 <- matrix(1:100, nrow = 10, byrow = True)
M[4, 2]
View(M)
M[4, 2]
M[17]
M
M[c(2, 3), c(4, 7)]
M[4, :] # gets 4th row and all columns
M[4,] # gets 4th row and all columns
M[,4] # gets 4th col and all rows
M[2:3,]
M
M[4, , drop = False]
dim(M[4, , drop = False])
dim(M[4, , drop = False])
M[4, , drop = False]
m2 <- rbind( c(1,2,1),
2,
rep(3, 3))
m3 <- cbind( c(1, 2, 3),
c(2, 2, 3),
c(1, 4, 3))
m2 == 3
m2 == 3 # matrix is looked at as vector by column
whcih(m2 == 3)
which(m2 == 3)
which(m2 == 3, arr.ind = T)
M2 <- rbind( c(1,2,1), # row bind
2,
rep(3, 3))
M3 <- cbind( c(1, 2, 3), # col bind
c(2, 2, 3),
c(1, 4, 3))
M2 == 3 # matrix is looked at as vector by column
which(M2 == 3)
which(M2 == 3, arr.ind = T)
remove(m2, m3)
gpa <- c(2.9, 3.2, 3.5)
age <- c(18, 20, 20)
financial.aid <- c(False, True, False)
financial.aid <- c(FALSE, TRUE, FALSE)
dat <- data.frame(gpa, age, financial.aid)
dat
names(dat)
dat$gpa
dat$age
dat[,1]
example.list <- list(data = dat, matrix = M, number = 10)
matrix
$matrix
$number
example.list[[1]]
example.list[['data']]
example.list[[2]]
example.list[['number']]
M1 <- matrix(1:100, nrow = 10, byrow = TRUE) # doesnt work look up API
e^3
exp(1)
exp(1)^3
exp(1)^3
log10(100)
log(4)
exp(1)^ 3
exp(1)^ 3
log10(100)
log(4)
11 - (4/5)
5^10/5
7^2 + 5
sqrt(7)
exp(1)^ 3
log10(100)
1:10
vect <- 1:10
mask <- c(T, F)
vect[mask]
mask <- c(T, F)
vect2 <- vect1[mask]
vect1 <- 1:100
vect1 <- 1:100
mask <- c(T, F)
vect2 <- vect1[mask]
mask <- c(T, F)
vect2 <- vect1[mask]
vect2
vec5 <- c(1:50,49:0)
vec5 <- c(1:50,49:0)
vec5 <- c(1:50,49:0)
vec5
arg2 <- 1:10
vec6 <- 1/arg2
vec6
vec7 <- 1:10
vect <- vec7^3
vec7
vec7 <- 1:10
vect7 <- vec7^3
vec7
vect7 <- 1:10
vect7 <- arg3^3
vect7 <- 1:10
vect7 <- vect7^3
vect7
seq(from = 1, to = 10, by = .5)
seq(from = 1, to = 10, length = 47)
seq1 <- seq(from = 0, to = 0.5, length = 350)
seq1 <- seq(from = 0, to = 0.5, length = 350)
seq1 <- seq(from = 0, to = 0.5, length = 350)
seq1
seq2 <- seq(from = 1, by = 0.25, length = 100)
seq2
age <- c(17, 19, 16, 34, 65, 72, 47, 52, 10, 12)
age
age[4]
age[1, 10]
age[1:10]
age[-2:-10]
age[-2:-9]
age[-5]
age[5] <- 56
age
over.50 <- age[age > 50]
over.50
over.50 <- which(age > 50)
over.50
over.50 <- age > 50
over.50
child <- age < 18
child
ages[ages < 18]
age[age < 18]
ages[ages == 34]
age[age == 34]
which(age == 34)
sum(age > 34)
energy[which(energy >= 2050)] # gives the values at indices 2, 3, 6, 7
energy <- c(1892, 2050, 2353, 1838, 1948, 2528, 2568)
energy[which(energy >= 2050)] # gives the values at indices 2, 3, 6, 7
length(energy[energy >= 2050]) # gives you the number of values >= 2050 in vector
sum(energy >= 2050) # since True == 1 then the sum is 4. Same as above
arg <- length(energy[energy >= 2050]) # gives you the number of values >= 2050 in vector
which(age == 34)
which(age == 34)
o <- which(age == 34)
o
o <- which(age == 34)
o
o <- which(age == 34)
o
(age > 34)
sum(age > 34)
length(child)
child <- age < 18
child
sum(child)
age[age(length)]
age <- c(17, 19, 16, 34, 65, 72, 47, 52, 10, 12)
age
age[age(length)]
age[age(length)]
age[length(age))]
age[length(age)]
exp(1)^ 3
log10(100)
log(4)
11 - (4/5)
5^10/5
7^2 + 5
exp(1)^ 3
exp(1)^ 3
sqrt(7)
ints <- 1:100
ints
mask <- c(T, F)
odds <- ints[mask]
odds
arg <- 1:50
repeat_three <- rep(arg, each = 3)
repeat_three
cycle <- c(1:50,49:0)
cycle
arg <- 1:10
fractions <- 1/arg
fractions
arg <- 1:10
cubed <- arg^3
cubed
seq1 <- seq(from = 0, to = 0.5, length = 350)
seq1
seq2 <- seq(from = 1, by = 0.25, length = 100)
seq2
age <- c(17, 19, 16, 34, 65, 72, 47, 52, 10, 12)
age
age[4]
age[-2:-9]
age[-5]
age[5] <- 56
age[5] <- 56
age
over.50 <- age > 50
over.50
child <- age < 18
child
child <- age < 18
child
age[age < 18]
which(age == 34)
sum(age > 34)
sum(child)
age[length(age)]
M <- matrix(1:16, nrow = 4)
M <- matrix(1:16, nrow = 4)
M <- matrix(1:16, nrow = 4)
M
M[4, 3]
M[3,]
M[,-3]
which(M2 == 3, arr.ind = T)
M2 <- rbind( c(1,2,1), # row bind
2,
rep(3, 3))
M3 <- cbind( c(1, 2, 3), # col bind
c(2, 2, 3),
c(1, 4, 3))
M2 == 3 # matrix is looked at as vector by column
which(M2 == 3)
M2
which(M2 == 3, arr.ind = T)
M[4, , drop = FALSE]
which(M == 2)
which(M2 == 2, arr.ind = T)
which(M2 == 2, arr.ind = T)
which(M2 == 2, arr.ind = T)
which(M2 == 2, arr.ind = T)
which(M == 2, arr.ind = T)
B <- M > 2
B
sum(b)
sum(B)
M2 <- rbind( c(1,2,1), # row bind
2,
rep(3, 3))
M2
M3 <- cbind( c(1, 2, 3), # col bind
c(2, 2, 3),
c(1, 4, 3))
M3
M2 <- cbind( c(sqrt{1}, sqrt{2}, sqrt{3}, sqrt{4}),
sqrt?
M3 <- cbind( c(1, 2, 3), # col bind
c(2, 2, 3),
c(1, 4, 3))
sqrt?
M2 <- cbind( c(sqrt(1), sqrt(2), sqrt(3), sqrt(4)),
c(sqrt(5), sqrt(6), sqrt(7), sqrt(8)),
c(sqrt(9), sqrt(10), sqrt(11), sqrt(12)),
c(sqrt(13), sqrt(14), sqrt(15), sqrt(16)))
M2 <- cbind( c(sqrt(1), sqrt(2), sqrt(3), sqrt(4)),
c(sqrt(5), sqrt(6), sqrt(7), sqrt(8)),
c(sqrt(9), sqrt(10), sqrt(11), sqrt(12)),
c(sqrt(13), sqrt(14), sqrt(15), sqrt(16))
M2 <- cbind( c(sqrt(1), sqrt(2), sqrt(3), sqrt(4)),
c(sqrt(5), sqrt(6), sqrt(7), sqrt(8)),
c(sqrt(9), sqrt(10), sqrt(11), sqrt(12)),
c(sqrt(13), sqrt(14), sqrt(15), sqrt(16)))
M2
I <- rbind( c(1, 0, 0, 0),
c(0, 1, 0, 0),
c(0, 0, 1, 0),
c(0, 0 , 0, 1))
I
which(I == 1, arr.ind = T)
I * M2
I %*% M2
I * M2
M2  + I
M2  + I
M2 - I
M2
ls()
install.packages(c("curl", "formatR", "htmltools", "rmarkdown", "tidyr"))
install.packages(c("foreign", "Matrix"), lib="/usr/local/Cellar/r/3.4.0_1/R.framework/Versions/3.4/Resources/library")
install.packages("shiny")
install.packages("devtools")
install.packages("leaflet")
shiny::runApp('School/CalPoly/02.2016-17/03.S17/Stat_331/Final_Project/Shiny_Examples/063-superzip-example')
install.packages("RColorBrewer")
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(dplyr)
runApp('School/CalPoly/02.2016-17/03.S17/Stat_331/Final_Project/Shiny_Examples/063-superzip-example')
runApp('School/CalPoly/02.2016-17/03.S17/Stat_331/Final_Project/Shiny_Examples/063-superzip-example')
install.packages("DT")
runApp('School/CalPoly/02.2016-17/03.S17/Stat_331/Final_Project/Shiny_Examples/063-superzip-example')
shiny::runApp('School/CalPoly/02.2016-17/03.S17/Stat_331/Final_Project/Shiny_Examples/063-superzip-example')
library("swirl")
swirl()
swirl()
bye()
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, time=40)
rep(0, times=40)
rep(c(0, 1, 2), times=10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c('My', 'name', 'is')
my_char
paste(my_char, collapse = " ")
c(my_char, 'Matthew')
c(my_char, 'Swirl')
my_name <- c(my_char, 'Matthew')
my_name
paste(my_name, collapse=' ')
paste('Hello', 'world!', sep = ' ')
paste(1:3, c('X', 'Y', 'Z'), sep = '')
paste(LETTERS, 1:4, sep='-')
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(y)
my_na <- is.na(my_data)
my_na
my_daa == NA
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0 ]
x[c(3, length(x))]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c('foo', 'bar', 'norf')
identical(vect, vect2)
foo['bar']
vect['foo']
vect['bar']
vet[c('foo', 'bar')]
vect[c('foo', 'bar')]
swirl()
Sys.Date()
mean(c(2, 4, 5))
getwd()
?sqrt
data <- c(NA, 5:25)
my_ttest <- function(data, mu0 = 0, alpha = .05) {
vals <- !is.na(data)
statistic <- t.test(vals, mu = mu0)
}
check1 <- myttest(data, mu0=16, alpha=0.01)
check1 <- my_ttest(data, mu0=16, alpha=0.01)
check1
?t.test
check1.conft.int
check1.conf.int
check1[conf.int]
check1['conf.int']
check1$conf.int
check1 <- myttest(data, mu0=16, alpha=0.01)
check1 <- my_ttest(data, mu0=16, alpha=0.01)
check1$conf.int
check1.mu
check1$parameter
check1$conf.int
my_ttest <- function(data, mu0 = 0, alpha = .05) {
vals <- !is.na(data)
test <- t.test(vals, mu = mu0)
}
check1 <- my_ttest(data, mu0=16, alpha=.01)
paste('H0: mu = ', check1$null.value, collapse = ' ')
paste('Test Statistic: ', check1$statistic, 'p-value: ', check1$p.value, collapse = ' ')
paste('Confidence Interval: ' check1$conf.int, collapse = ' ')
paste('Confidence Interval: ' check1$conf.int, collapse = ' ')
paste('Confidence Interval: ', check1$conf.int, collapse = ' ')
paste('check1$conf.int, collapse = ' ')
paste(check1$conf.int, collapse = ' ')
check1$estimate
?pt
library(swirl)
swirl()
?
swirl()
M <- matrix(1:100, nrow = 10)
dim(M)
M[4,]
dim(M[4,])
M[4, , drop = F]
dim(M[4, , drop=F])
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <-flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sahpe_mat <- sapply(flag_shapes, range)
rm(sahpe_mat)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 5))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply)flags$population, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
shiny::runApp('School/CalPoly/02.2016-17/03.S17/Stat_331/Final_Project/Our_Shiny_App')
install.packages(c("devtools", "mapproj", "maps"))
setwd("/Users/Husane/School/CalPoly/02.2016-17/03.S17/Stat_331/Final_Project_Repo/Stat331-Final_Project/Dashboard")
shiny::runApp()
getwd()
library(XML)
library(rvest)
library(magrittr)
library(ggmap)
library(maps)
library(XML)
library(rvest)
library(magrittr)
library(ggmap)
library(maps)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(devtools)
install_github("cosmofont", "seankross")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
